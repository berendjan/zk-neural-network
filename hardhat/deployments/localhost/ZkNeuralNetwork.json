{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zkNeuralNetworkVerifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gaslane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "X",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "Y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "a",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "X",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "Y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "b",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "X",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "Y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "c",
              "type": "tuple"
            }
          ],
          "internalType": "struct Verifier.Proof",
          "name": "proof",
          "type": "tuple"
        },
        {
          "internalType": "uint256[1]",
          "name": "input",
          "type": "uint256[1]"
        }
      ],
      "name": "withdrawWithProofOfZkNeuralNetwork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52558d40d684b038afd94b04435048a16dd6923a93fb4592b027146590622894",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1028565",
    "logsBloom": "0x
    "blockHash": "0x9378693e50f216d05ebd6b545655f9a82d62b8feea26c1f884f056dd2dfaedbc",
    "transactionHash": "0x52558d40d684b038afd94b04435048a16dd6923a93fb4592b027146590622894",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1028565",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "1",
    10000000
  ],
  "numDeployments": 1,
  "solcInputHash": "8abb7d6478579ac37097bf6902c1cbe0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zkNeuralNetworkVerifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gaslane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"b\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"c\",\"type\":\"tuple\"}],\"internalType\":\"struct Verifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"uint256[1]\",\"name\":\"input\",\"type\":\"uint256[1]\"}],\"name\":\"withdrawWithProofOfZkNeuralNetwork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZkNeuralNetwork.sol\":\"ZkNeuralNetwork\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// This file is MIT Licensed.\\n//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\npragma solidity ^0.8.0;\\n\\nlibrary Pairing {\\n    struct G1Point {\\n        uint X;\\n        uint Y;\\n    }\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint[2] X;\\n        uint[2] Y;\\n    }\\n\\n    /// @return the generator of G1\\n    function P1() internal pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n\\n    /// @return the generator of G2\\n    function P2() internal pure returns (G2Point memory) {\\n        return\\n            G2Point(\\n                [\\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634\\n                ],\\n                [\\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531\\n                ]\\n            );\\n    }\\n\\n    /// @return the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        uint q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n        if (p.X == 0 && p.Y == 0) return G1Point(0, 0);\\n        return G1Point(p.X, q - (p.Y % q));\\n    }\\n\\n    /// @return r the sum of two points of G1\\n    function addition(\\n        G1Point memory p1,\\n        G1Point memory p2\\n    ) internal view returns (G1Point memory r) {\\n        uint[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success);\\n    }\\n\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(G1Point memory p, uint s) internal view returns (G1Point memory r) {\\n        uint[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success);\\n    }\\n\\n    /// @return the result of computing the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should\\n    /// return true.\\n    function pairing(G1Point[] memory p1, G2Point[] memory p2) internal view returns (bool) {\\n        require(p1.length == p2.length);\\n        uint elements = p1.length;\\n        uint inputSize = elements * 6;\\n        uint[] memory input = new uint[](inputSize);\\n        for (uint i = 0; i < elements; i++) {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[1];\\n            input[i * 6 + 3] = p2[i].X[0];\\n            input[i * 6 + 4] = p2[i].Y[1];\\n            input[i * 6 + 5] = p2[i].Y[0];\\n        }\\n        uint[1] memory out;\\n        bool success;\\n        assembly {\\n            success := staticcall(\\n                sub(gas(), 2000),\\n                8,\\n                add(input, 0x20),\\n                mul(inputSize, 0x20),\\n                out,\\n                0x20\\n            )\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success);\\n        return out[0] != 0;\\n    }\\n\\n    /// Convenience method for a pairing check for two pairs.\\n    function pairingProd2(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](2);\\n        G2Point[] memory p2 = new G2Point[](2);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        return pairing(p1, p2);\\n    }\\n\\n    /// Convenience method for a pairing check for three pairs.\\n    function pairingProd3(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](3);\\n        G2Point[] memory p2 = new G2Point[](3);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        return pairing(p1, p2);\\n    }\\n\\n    /// Convenience method for a pairing check for four pairs.\\n    function pairingProd4(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[] memory p1 = new G1Point[](4);\\n        G2Point[] memory p2 = new G2Point[](4);\\n        p1[0] = a1;\\n        p1[1] = b1;\\n        p1[2] = c1;\\n        p1[3] = d1;\\n        p2[0] = a2;\\n        p2[1] = b2;\\n        p2[2] = c2;\\n        p2[3] = d2;\\n        return pairing(p1, p2);\\n    }\\n}\\n\\ncontract Verifier {\\n    using Pairing for *;\\n    struct VerifyingKey {\\n        Pairing.G1Point alpha;\\n        Pairing.G2Point beta;\\n        Pairing.G2Point gamma;\\n        Pairing.G2Point delta;\\n        Pairing.G1Point[] gamma_abc;\\n    }\\n    struct Proof {\\n        Pairing.G1Point a;\\n        Pairing.G2Point b;\\n        Pairing.G1Point c;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alpha = Pairing.G1Point(\\n            uint256(0x0aaee2be5d7c9dc52dbd16637135b36427118ecec984347fa8fb3e6cfb5333ba),\\n            uint256(0x14586763a8aa65ce2e15c9c559469f2420bf69993fdb4dcf55eb7d322c9b9cac)\\n        );\\n        vk.beta = Pairing.G2Point(\\n            [\\n                uint256(0x1db3ec7d2f4160884fa651eb013a71e44141c6e0ab54309d53b2eef0fa25f8db),\\n                uint256(0x06192ec68524eff98786af98a7484b03077a9c128961f1461a3bf2f9e047239c)\\n            ],\\n            [\\n                uint256(0x11b63fbbf08fddc4fd3e48232091f7c507438e76609b2d061f14f435e4b80e0d),\\n                uint256(0x17f43ca246cd54ce017d5411b488d74b3457a8fcda9eeea25660ca72be5769e8)\\n            ]\\n        );\\n        vk.gamma = Pairing.G2Point(\\n            [\\n                uint256(0x05d338beab2bbc0145f7a62315795d047429753e3190fcffeb6a14f86d948cc9),\\n                uint256(0x010849b3bbad34fd50e151a661b5811c66b3b5956be1f15f4dae7d91c53f28fb)\\n            ],\\n            [\\n                uint256(0x0107d4c45b84b23191dd6060d85ccbf591d183416649b7eb2bca8662bb25b17a),\\n                uint256(0x2fd3cea372da0ffef817d33f8a2899dd38064ab10c1083ba03d5037aaa90a613)\\n            ]\\n        );\\n        vk.delta = Pairing.G2Point(\\n            [\\n                uint256(0x1d5fa23ae5470fc5a6c31c49ece0b5e4eb33d138551821dda70bde00093a4a00),\\n                uint256(0x08b15b320e47849770ffd5fa1a753894f95549b0d35466ecefc4736318d7f95a)\\n            ],\\n            [\\n                uint256(0x0239dd49ccec7c1b29849bd05f61056dc0f01108173f0e75fb999e042e4f2a64),\\n                uint256(0x1285ede350d6a21270bf24d03ec2be085526791a46e39bacdf22df8ba4f079dc)\\n            ]\\n        );\\n        vk.gamma_abc = new Pairing.G1Point[](2);\\n        vk.gamma_abc[0] = Pairing.G1Point(\\n            uint256(0x1d876c0bac3df911141424628c95cfbdb9823425bc7d6ebd408757e139bb4d15),\\n            uint256(0x02cf74b06afd8c4752eb904cd1f94fc256cc8c94c2ab5f1c5c1d357d3877c460)\\n        );\\n        vk.gamma_abc[1] = Pairing.G1Point(\\n            uint256(0x1ee496f3b7d1e68b94856dbc8dd78f46164a413c887da594e5f3800da430886a),\\n            uint256(0x20b6e7bda292bf08c58d9ee8f1ca583a3f7e0777c7e7750fcd21c334106d1413)\\n        );\\n    }\\n\\n    function verify(uint[] memory input, Proof memory proof) internal view returns (uint) {\\n        uint256 snark_scalar_field = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        VerifyingKey memory vk = verifyingKey();\\n        require(input.length + 1 == vk.gamma_abc.length);\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n        for (uint i = 0; i < input.length; i++) {\\n            require(input[i] < snark_scalar_field);\\n            vk_x = Pairing.addition(vk_x, Pairing.scalar_mul(vk.gamma_abc[i + 1], input[i]));\\n        }\\n        vk_x = Pairing.addition(vk_x, vk.gamma_abc[0]);\\n        if (\\n            !Pairing.pairingProd4(\\n                proof.a,\\n                proof.b,\\n                Pairing.negate(vk_x),\\n                vk.gamma,\\n                Pairing.negate(proof.c),\\n                vk.delta,\\n                Pairing.negate(vk.alpha),\\n                vk.beta\\n            )\\n        ) return 1;\\n        return 0;\\n    }\\n\\n    function verifyTx(Proof memory proof, uint[1] memory input) public view returns (bool r) {\\n        uint[] memory inputValues = new uint[](1);\\n\\n        for (uint i = 0; i < input.length; i++) {\\n            inputValues[i] = input[i];\\n        }\\n        if (verify(inputValues, proof) == 0) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6204243a559f33563b9d21473cbf468faf02727f5b3aa5e2e6ead9119684f2b9\",\"license\":\"MIT\"},\"contracts/ZkNeuralNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"../node_modules/@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"../node_modules/@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"./Verifier.sol\\\";\\n\\ncontract ZkNeuralNetwork is VRFConsumerBaseV2 {\\n    enum WithdrawalState {\\n        Idle, // no withdrawal started\\n        RandomNumberRequested, // requestWithdrawal called\\n        ProvideZkProof // call\\n    }\\n\\n    WithdrawalState private s_withdrawalState;\\n    uint private s_numberToVerify;\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    Verifier private immutable i_zkNeuralNetworkVerifier;\\n    bytes32 private immutable i_gaslane;\\n    uint64 private immutable i_subscriptionId;\\n    uint32 private immutable i_gasLimit;\\n\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint16 private constant NUM_RANDOM_WORDS = 1;\\n\\n    constructor(\\n        address zkNeuralNetworkVerifier,\\n        address vrfCoordinatorV2,\\n        bytes32 gaslane,\\n        uint64 subscriptionId,\\n        uint32 gasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_zkNeuralNetworkVerifier = Verifier(zkNeuralNetworkVerifier);\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gaslane = gaslane;\\n        i_subscriptionId = subscriptionId;\\n        i_gasLimit = gasLimit;\\n        s_withdrawalState = WithdrawalState.Idle;\\n    }\\n\\n    function requestWithdrawal() external {\\n        require(\\n            s_withdrawalState == WithdrawalState.Idle,\\n            \\\"must be in Idle state to start withdrawal\\\"\\n        );\\n        i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_gasLimit,\\n            NUM_RANDOM_WORDS\\n        );\\n        s_withdrawalState = WithdrawalState.RandomNumberRequested;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 /*requestId*/,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        s_numberToVerify = randomWords[0] % 10;\\n        s_withdrawalState = WithdrawalState.ProvideZkProof;\\n    }\\n\\n    function withdrawWithProofOfZkNeuralNetwork(\\n        Verifier.Proof memory proof,\\n        uint[1] memory input\\n    ) external {\\n        // verify that the public data part of the proof equals the number given by the vrf. aka we're checking the right number.\\n        require(input[0] == s_numberToVerify, \\\"Providing proof for wrong number\\\");\\n\\n        bool verified = i_zkNeuralNetworkVerifier.verifyTx(proof, input);\\n        require(verified, \\\"The neural network did not classifiy the input as correct!\\\");\\n\\n        uint256 balance = address(this).balance;\\n        (bool sent, ) = msg.sender.call{value: balance}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\n        s_withdrawalState = WithdrawalState.Idle;\\n    }\\n}\\n\",\"keccak256\":\"0xce6e4f29cea69b7c762a0071746488f271049e50f28e9751312e3a947506af8a\",\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"node_modules/@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620014ee380380620014ee833981810160405281019062000038919062000273565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508260e081815250508167ffffffffffffffff166101008167ffffffffffffffff16815250508063ffffffff166101208163ffffffff168152505060008060006101000a81548160ff02191690836002811115620001385762000137620002fb565b5b021790555050505050506200032a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017a826200014d565b9050919050565b6200018c816200016d565b81146200019857600080fd5b50565b600081519050620001ac8162000181565b92915050565b6000819050919050565b620001c781620001b2565b8114620001d357600080fd5b50565b600081519050620001e781620001bc565b92915050565b600067ffffffffffffffff82169050919050565b6200020c81620001ed565b81146200021857600080fd5b50565b6000815190506200022c8162000201565b92915050565b600063ffffffff82169050919050565b6200024d8162000232565b81146200025957600080fd5b50565b6000815190506200026d8162000242565b92915050565b600080600080600060a0868803121562000292576200029162000148565b5b6000620002a2888289016200019b565b9550506020620002b5888289016200019b565b9450506040620002c888828901620001d6565b9350506060620002db888289016200021b565b9250506080620002ee888289016200025c565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161116f6200037f600039600061045c0152600061043901526000610418015260006101a8015260006103dc015260008181608a015260de015261116f6000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631fe543e3146100465780638588047214610062578063dbaf21451461007e575b600080fd5b610060600480360381019061005b919061070c565b610088565b005b61007c600480360381019061007791906109d4565b610148565b005b610086610366565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461013a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610131929190610a57565b60405180910390fd5b610144828261050d565b5050565b6001548160006001811061015f5761015e610a80565b5b6020020151146101a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019b90610b0c565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f48d772984846040518363ffffffff1660e01b8152600401610201929190610cfc565b602060405180830381865afa15801561021e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102429190610d5f565b905080610284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027b90610dfe565b60405180910390fd5b600047905060003373ffffffffffffffffffffffffffffffffffffffff16826040516102af90610e4f565b60006040518083038185875af1925050503d80600081146102ec576040519150601f19603f3d011682016040523d82523d6000602084013e6102f1565b606091505b5050905080610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032c90610eb0565b60405180910390fd5b60008060006101000a81548160ff0219169083600281111561035a57610359610ed0565b5b02179055505050505050565b6000600281111561037a57610379610ed0565b5b60008054906101000a900460ff16600281111561039a57610399610ed0565b5b146103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d190610f71565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161049d959493929190611044565b6020604051808303816000875af11580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906110ac565b5060016000806101000a81548160ff0219169083600281111561050657610505610ed0565b5b0217905550565b600a8160008151811061052357610522610a80565b5b60200260200101516105359190611108565b60018190555060026000806101000a81548160ff021916908360028111156105605761055f610ed0565b5b02179055505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6105908161057d565b811461059b57600080fd5b50565b6000813590506105ad81610587565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610601826105b8565b810181811067ffffffffffffffff821117156106205761061f6105c9565b5b80604052505050565b6000610633610569565b905061063f82826105f8565b919050565b600067ffffffffffffffff82111561065f5761065e6105c9565b5b602082029050602081019050919050565b600080fd5b600061068861068384610644565b610629565b905080838252602082019050602084028301858111156106ab576106aa610670565b5b835b818110156106d457806106c0888261059e565b8452602084019350506020810190506106ad565b5050509392505050565b600082601f8301126106f3576106f26105b3565b5b8135610703848260208601610675565b91505092915050565b6000806040838503121561072357610722610573565b5b60006107318582860161059e565b925050602083013567ffffffffffffffff81111561075257610751610578565b5b61075e858286016106de565b9150509250929050565b600080fd5b60006040828403121561078357610782610768565b5b61078d6040610629565b9050600061079d8482850161059e565b60008301525060206107b18482850161059e565b60208301525092915050565b600067ffffffffffffffff8211156107d8576107d76105c9565b5b602082029050919050565b60006107f66107f1846107bd565b610629565b905080602084028301858111156108105761080f610670565b5b835b818110156108395780610825888261059e565b845260208401935050602081019050610812565b5050509392505050565b600082601f830112610858576108576105b3565b5b60026108658482856107e3565b91505092915050565b60006080828403121561088457610883610768565b5b61088e6040610629565b9050600061089e84828501610843565b60008301525060406108b284828501610843565b60208301525092915050565b600061010082840312156108d5576108d4610768565b5b6108df6060610629565b905060006108ef8482850161076d565b60008301525060406109038482850161086e565b60208301525060c06109178482850161076d565b60408301525092915050565b600067ffffffffffffffff82111561093e5761093d6105c9565b5b602082029050919050565b600061095c61095784610923565b610629565b9050806020840283018581111561097657610975610670565b5b835b8181101561099f578061098b888261059e565b845260208401935050602081019050610978565b5050509392505050565b600082601f8301126109be576109bd6105b3565b5b60016109cb848285610949565b91505092915050565b60008061012083850312156109ec576109eb610573565b5b60006109fa858286016108be565b925050610100610a0c858286016109a9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b82525050565b6000604082019050610a6c6000830185610a48565b610a796020830184610a48565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50726f766964696e672070726f6f6620666f722077726f6e67206e756d626572600082015250565b6000610af6602083610aaf565b9150610b0182610ac0565b602082019050919050565b60006020820190508181036000830152610b2581610ae9565b9050919050565b610b358161057d565b82525050565b604082016000820151610b516000850182610b2c565b506020820151610b646020850182610b2c565b50505050565b600060029050919050565b600081905092915050565b6000819050919050565b6000610b968383610b2c565b60208301905092915050565b6000602082019050919050565b610bb881610b6a565b610bc28184610b75565b9250610bcd82610b80565b8060005b83811015610bfe578151610be58782610b8a565b9650610bf083610ba2565b925050600181019050610bd1565b505050505050565b608082016000820151610c1c6000850182610baf565b506020820151610c2f6040850182610baf565b50505050565b61010082016000820151610c4c6000850182610b3b565b506020820151610c5f6040850182610c06565b506040820151610c7260c0850182610b3b565b50505050565b600060019050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b610cae81610c78565b610cb88184610c83565b9250610cc382610c8e565b8060005b83811015610cf4578151610cdb8782610b8a565b9650610ce683610c98565b925050600181019050610cc7565b505050505050565b600061012082019050610d126000830185610c35565b610d20610100830184610ca5565b9392505050565b60008115159050919050565b610d3c81610d27565b8114610d4757600080fd5b50565b600081519050610d5981610d33565b92915050565b600060208284031215610d7557610d74610573565b5b6000610d8384828501610d4a565b91505092915050565b7f546865206e657572616c206e6574776f726b20646964206e6f7420636c61737360008201527f696669792074686520696e70757420617320636f727265637421000000000000602082015250565b6000610de8603a83610aaf565b9150610df382610d8c565b604082019050919050565b60006020820190508181036000830152610e1781610ddb565b9050919050565b600081905092915050565b50565b6000610e39600083610e1e565b9150610e4482610e29565b600082019050919050565b6000610e5a82610e2c565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610e9a601483610aaf565b9150610ea582610e64565b602082019050919050565b60006020820190508181036000830152610ec981610e8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f6d75737420626520696e2049646c6520737461746520746f207374617274207760008201527f69746864726177616c0000000000000000000000000000000000000000000000602082015250565b6000610f5b602983610aaf565b9150610f6682610eff565b604082019050919050565b60006020820190508181036000830152610f8a81610f4e565b9050919050565b6000819050919050565b610fa481610f91565b82525050565b600067ffffffffffffffff82169050919050565b610fc781610faa565b82525050565b600061ffff82169050919050565b610fe481610fcd565b82525050565b600063ffffffff82169050919050565b61100381610fea565b82525050565b6000819050919050565b600061102e61102961102484610fcd565b611009565b610fea565b9050919050565b61103e81611013565b82525050565b600060a0820190506110596000830188610f9b565b6110666020830187610fbe565b6110736040830186610fdb565b6110806060830185610ffa565b61108d6080830184611035565b9695505050505050565b6000815190506110a681610587565b92915050565b6000602082840312156110c2576110c1610573565b5b60006110d084828501611097565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111138261057d565b915061111e8361057d565b92508261112e5761112d6110d9565b5b82820690509291505056fea2646970667358221220866193355f29f61379e6538f09fcb0a98c633a36b25e1c1aaf4aea6a31e39a0464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80631fe543e3146100465780638588047214610062578063dbaf21451461007e575b600080fd5b610060600480360381019061005b919061070c565b610088565b005b61007c600480360381019061007791906109d4565b610148565b005b610086610366565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461013a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610131929190610a57565b60405180910390fd5b610144828261050d565b5050565b6001548160006001811061015f5761015e610a80565b5b6020020151146101a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019b90610b0c565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f48d772984846040518363ffffffff1660e01b8152600401610201929190610cfc565b602060405180830381865afa15801561021e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102429190610d5f565b905080610284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027b90610dfe565b60405180910390fd5b600047905060003373ffffffffffffffffffffffffffffffffffffffff16826040516102af90610e4f565b60006040518083038185875af1925050503d80600081146102ec576040519150601f19603f3d011682016040523d82523d6000602084013e6102f1565b606091505b5050905080610335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032c90610eb0565b60405180910390fd5b60008060006101000a81548160ff0219169083600281111561035a57610359610ed0565b5b02179055505050505050565b6000600281111561037a57610379610ed0565b5b60008054906101000a900460ff16600281111561039a57610399610ed0565b5b146103da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d190610f71565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161049d959493929190611044565b6020604051808303816000875af11580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906110ac565b5060016000806101000a81548160ff0219169083600281111561050657610505610ed0565b5b0217905550565b600a8160008151811061052357610522610a80565b5b60200260200101516105359190611108565b60018190555060026000806101000a81548160ff021916908360028111156105605761055f610ed0565b5b02179055505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6105908161057d565b811461059b57600080fd5b50565b6000813590506105ad81610587565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610601826105b8565b810181811067ffffffffffffffff821117156106205761061f6105c9565b5b80604052505050565b6000610633610569565b905061063f82826105f8565b919050565b600067ffffffffffffffff82111561065f5761065e6105c9565b5b602082029050602081019050919050565b600080fd5b600061068861068384610644565b610629565b905080838252602082019050602084028301858111156106ab576106aa610670565b5b835b818110156106d457806106c0888261059e565b8452602084019350506020810190506106ad565b5050509392505050565b600082601f8301126106f3576106f26105b3565b5b8135610703848260208601610675565b91505092915050565b6000806040838503121561072357610722610573565b5b60006107318582860161059e565b925050602083013567ffffffffffffffff81111561075257610751610578565b5b61075e858286016106de565b9150509250929050565b600080fd5b60006040828403121561078357610782610768565b5b61078d6040610629565b9050600061079d8482850161059e565b60008301525060206107b18482850161059e565b60208301525092915050565b600067ffffffffffffffff8211156107d8576107d76105c9565b5b602082029050919050565b60006107f66107f1846107bd565b610629565b905080602084028301858111156108105761080f610670565b5b835b818110156108395780610825888261059e565b845260208401935050602081019050610812565b5050509392505050565b600082601f830112610858576108576105b3565b5b60026108658482856107e3565b91505092915050565b60006080828403121561088457610883610768565b5b61088e6040610629565b9050600061089e84828501610843565b60008301525060406108b284828501610843565b60208301525092915050565b600061010082840312156108d5576108d4610768565b5b6108df6060610629565b905060006108ef8482850161076d565b60008301525060406109038482850161086e565b60208301525060c06109178482850161076d565b60408301525092915050565b600067ffffffffffffffff82111561093e5761093d6105c9565b5b602082029050919050565b600061095c61095784610923565b610629565b9050806020840283018581111561097657610975610670565b5b835b8181101561099f578061098b888261059e565b845260208401935050602081019050610978565b5050509392505050565b600082601f8301126109be576109bd6105b3565b5b60016109cb848285610949565b91505092915050565b60008061012083850312156109ec576109eb610573565b5b60006109fa858286016108be565b925050610100610a0c858286016109a9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4182610a16565b9050919050565b610a5181610a36565b82525050565b6000604082019050610a6c6000830185610a48565b610a796020830184610a48565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f50726f766964696e672070726f6f6620666f722077726f6e67206e756d626572600082015250565b6000610af6602083610aaf565b9150610b0182610ac0565b602082019050919050565b60006020820190508181036000830152610b2581610ae9565b9050919050565b610b358161057d565b82525050565b604082016000820151610b516000850182610b2c565b506020820151610b646020850182610b2c565b50505050565b600060029050919050565b600081905092915050565b6000819050919050565b6000610b968383610b2c565b60208301905092915050565b6000602082019050919050565b610bb881610b6a565b610bc28184610b75565b9250610bcd82610b80565b8060005b83811015610bfe578151610be58782610b8a565b9650610bf083610ba2565b925050600181019050610bd1565b505050505050565b608082016000820151610c1c6000850182610baf565b506020820151610c2f6040850182610baf565b50505050565b61010082016000820151610c4c6000850182610b3b565b506020820151610c5f6040850182610c06565b506040820151610c7260c0850182610b3b565b50505050565b600060019050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b610cae81610c78565b610cb88184610c83565b9250610cc382610c8e565b8060005b83811015610cf4578151610cdb8782610b8a565b9650610ce683610c98565b925050600181019050610cc7565b505050505050565b600061012082019050610d126000830185610c35565b610d20610100830184610ca5565b9392505050565b60008115159050919050565b610d3c81610d27565b8114610d4757600080fd5b50565b600081519050610d5981610d33565b92915050565b600060208284031215610d7557610d74610573565b5b6000610d8384828501610d4a565b91505092915050565b7f546865206e657572616c206e6574776f726b20646964206e6f7420636c61737360008201527f696669792074686520696e70757420617320636f727265637421000000000000602082015250565b6000610de8603a83610aaf565b9150610df382610d8c565b604082019050919050565b60006020820190508181036000830152610e1781610ddb565b9050919050565b600081905092915050565b50565b6000610e39600083610e1e565b9150610e4482610e29565b600082019050919050565b6000610e5a82610e2c565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000610e9a601483610aaf565b9150610ea582610e64565b602082019050919050565b60006020820190508181036000830152610ec981610e8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f6d75737420626520696e2049646c6520737461746520746f207374617274207760008201527f69746864726177616c0000000000000000000000000000000000000000000000602082015250565b6000610f5b602983610aaf565b9150610f6682610eff565b604082019050919050565b60006020820190508181036000830152610f8a81610f4e565b9050919050565b6000819050919050565b610fa481610f91565b82525050565b600067ffffffffffffffff82169050919050565b610fc781610faa565b82525050565b600061ffff82169050919050565b610fe481610fcd565b82525050565b600063ffffffff82169050919050565b61100381610fea565b82525050565b6000819050919050565b600061102e61102961102484610fcd565b611009565b610fea565b9050919050565b61103e81611013565b82525050565b600060a0820190506110596000830188610f9b565b6110666020830187610fbe565b6110736040830186610fdb565b6110806060830185610ffa565b61108d6080830184611035565b9695505050505050565b6000815190506110a681610587565b92915050565b6000602082840312156110c2576110c1610573565b5b60006110d084828501611097565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006111138261057d565b915061111e8361057d565b92508261112e5761112d6110d9565b5b82820690509291505056fea2646970667358221220866193355f29f61379e6538f09fcb0a98c633a36b25e1c1aaf4aea6a31e39a0464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2120,
        "contract": "contracts/ZkNeuralNetwork.sol:ZkNeuralNetwork",
        "label": "s_withdrawalState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(WithdrawalState)2117"
      },
      {
        "astId": 2122,
        "contract": "contracts/ZkNeuralNetwork.sol:ZkNeuralNetwork",
        "label": "s_numberToVerify",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_enum(WithdrawalState)2117": {
        "encoding": "inplace",
        "label": "enum ZkNeuralNetwork.WithdrawalState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}